
DCSLAB-Fourth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aa4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002c2c  08002c2c  00012c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c3c  08002c3c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c3c  08002c3c  00012c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c44  08002c44  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c44  08002c44  00012c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c48  08002c48  00012c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00000120  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000013c  2000013c  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000097c2  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015b9  00000000  00000000  0002980e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b0  00000000  00000000  0002adc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000908  00000000  00000000  0002b778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001faeb  00000000  00000000  0002c080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009ebe  00000000  00000000  0004bb6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4833  00000000  00000000  00055a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011a25c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000285c  00000000  00000000  0011a2ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002c14 	.word	0x08002c14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08002c14 	.word	0x08002c14

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fce8 	bl	8000ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f840 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f962 	bl	80007a0 <MX_GPIO_Init>
  MX_TIM6_Init();
 80004dc:	f000 f8a6 	bl	800062c <MX_TIM6_Init>
  MX_TIM11_Init();
 80004e0:	f000 f910 	bl	8000704 <MX_TIM11_Init>
  MX_TIM7_Init();
 80004e4:	f000 f8d8 	bl	8000698 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80004e8:	4815      	ldr	r0, [pc, #84]	; (8000540 <main+0x74>)
 80004ea:	f001 fcdd 	bl	8001ea8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80004ee:	4815      	ldr	r0, [pc, #84]	; (8000544 <main+0x78>)
 80004f0:	f001 fcda 	bl	8001ea8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80004f4:	2100      	movs	r1, #0
 80004f6:	4814      	ldr	r0, [pc, #80]	; (8000548 <main+0x7c>)
 80004f8:	f001 fda0 	bl	800203c <HAL_TIM_PWM_Start>

  TIM11->CCR1 = 0;
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <main+0x80>)
 80004fe:	2200      	movs	r2, #0
 8000500:	635a      	str	r2, [r3, #52]	; 0x34
  pos = 0;
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <main+0x84>)
 8000504:	f04f 0200 	mov.w	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  	  switch(state){
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <main+0x88>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d002      	beq.n	8000518 <main+0x4c>
 8000512:	2b01      	cmp	r3, #1
 8000514:	d011      	beq.n	800053a <main+0x6e>
 8000516:	e00c      	b.n	8000532 <main+0x66>

	  	  	  case INIT:
	  	  		  HAL_Delay(1000);
 8000518:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800051c:	f000 fd34 	bl	8000f88 <HAL_Delay>
	  	  		  TIM11->CCR1 = 350;
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <main+0x80>)
 8000522:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000526:	635a      	str	r2, [r3, #52]	; 0x34
	  	  		  HAL_Delay(2000);
 8000528:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800052c:	f000 fd2c 	bl	8000f88 <HAL_Delay>
//	  	  		  state = set_Ts;
	  	  		  break;
 8000530:	e004      	b.n	800053c <main+0x70>
	  	  	  case INIT2:

	  	  		  break;

	  	  	  default:
	  	  		  state = INIT;
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <main+0x88>)
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]
	  	  		  break;
 8000538:	e000      	b.n	800053c <main+0x70>
	  	  		  break;
 800053a:	bf00      	nop
	  	  switch(state){
 800053c:	e7e5      	b.n	800050a <main+0x3e>
 800053e:	bf00      	nop
 8000540:	20000038 	.word	0x20000038
 8000544:	20000080 	.word	0x20000080
 8000548:	200000c8 	.word	0x200000c8
 800054c:	40014800 	.word	0x40014800
 8000550:	20000118 	.word	0x20000118
 8000554:	20000136 	.word	0x20000136

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f002 fb4c 	bl	8002c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b28      	ldr	r3, [pc, #160]	; (8000624 <SystemClock_Config+0xcc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a27      	ldr	r2, [pc, #156]	; (8000624 <SystemClock_Config+0xcc>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b25      	ldr	r3, [pc, #148]	; (8000624 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b22      	ldr	r3, [pc, #136]	; (8000628 <SystemClock_Config+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a21      	ldr	r2, [pc, #132]	; (8000628 <SystemClock_Config+0xd0>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	2310      	movs	r3, #16
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c0:	2302      	movs	r3, #2
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c4:	2300      	movs	r3, #0
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c8:	2308      	movs	r3, #8
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005cc:	23a8      	movs	r3, #168	; 0xa8
 80005ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005d4:	2304      	movs	r3, #4
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 ffef 	bl	80015c0 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e8:	f000 fb08 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2302      	movs	r3, #2
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000602:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2105      	movs	r1, #5
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fa50 	bl	8001ab0 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000616:	f000 faf1 	bl	8000bfc <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3750      	adds	r7, #80	; 0x50
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000632:	463b      	mov	r3, r7
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <MX_TIM6_Init+0x64>)
 800063c:	4a15      	ldr	r2, [pc, #84]	; (8000694 <MX_TIM6_Init+0x68>)
 800063e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 41;
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_TIM6_Init+0x64>)
 8000642:	2229      	movs	r2, #41	; 0x29
 8000644:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_TIM6_Init+0x64>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 800064c:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MX_TIM6_Init+0x64>)
 800064e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000652:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000654:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_TIM6_Init+0x64>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800065a:	480d      	ldr	r0, [pc, #52]	; (8000690 <MX_TIM6_Init+0x64>)
 800065c:	f001 fbd4 	bl	8001e08 <HAL_TIM_Base_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000666:	f000 fac9 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066a:	2300      	movs	r3, #0
 800066c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000672:	463b      	mov	r3, r7
 8000674:	4619      	mov	r1, r3
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <MX_TIM6_Init+0x64>)
 8000678:	f002 fa10 	bl	8002a9c <HAL_TIMEx_MasterConfigSynchronization>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000682:	f000 fabb 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000038 	.word	0x20000038
 8000694:	40001000 	.word	0x40001000

08000698 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069e:	463b      	mov	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <MX_TIM7_Init+0x64>)
 80006a8:	4a15      	ldr	r2, [pc, #84]	; (8000700 <MX_TIM7_Init+0x68>)
 80006aa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 159;
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_TIM7_Init+0x64>)
 80006ae:	229f      	movs	r2, #159	; 0x9f
 80006b0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_TIM7_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80006b8:	4b10      	ldr	r3, [pc, #64]	; (80006fc <MX_TIM7_Init+0x64>)
 80006ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80006be:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_TIM7_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80006c6:	480d      	ldr	r0, [pc, #52]	; (80006fc <MX_TIM7_Init+0x64>)
 80006c8:	f001 fb9e 	bl	8001e08 <HAL_TIM_Base_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80006d2:	f000 fa93 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80006de:	463b      	mov	r3, r7
 80006e0:	4619      	mov	r1, r3
 80006e2:	4806      	ldr	r0, [pc, #24]	; (80006fc <MX_TIM7_Init+0x64>)
 80006e4:	f002 f9da 	bl	8002a9c <HAL_TIMEx_MasterConfigSynchronization>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80006ee:	f000 fa85 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000080 	.word	0x20000080
 8000700:	40001400 	.word	0x40001400

08000704 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
 8000718:	615a      	str	r2, [r3, #20]
 800071a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_TIM11_Init+0x94>)
 800071e:	4a1f      	ldr	r2, [pc, #124]	; (800079c <MX_TIM11_Init+0x98>)
 8000720:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 9;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_TIM11_Init+0x94>)
 8000724:	2209      	movs	r2, #9
 8000726:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_TIM11_Init+0x94>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1119;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_TIM11_Init+0x94>)
 8000730:	f240 425f 	movw	r2, #1119	; 0x45f
 8000734:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_TIM11_Init+0x94>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_TIM11_Init+0x94>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000742:	4815      	ldr	r0, [pc, #84]	; (8000798 <MX_TIM11_Init+0x94>)
 8000744:	f001 fb60 	bl	8001e08 <HAL_TIM_Base_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800074e:	f000 fa55 	bl	8000bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8000752:	4811      	ldr	r0, [pc, #68]	; (8000798 <MX_TIM11_Init+0x94>)
 8000754:	f001 fc18 	bl	8001f88 <HAL_TIM_PWM_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800075e:	f000 fa4d 	bl	8000bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000762:	2360      	movs	r3, #96	; 0x60
 8000764:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	4619      	mov	r1, r3
 8000778:	4807      	ldr	r0, [pc, #28]	; (8000798 <MX_TIM11_Init+0x94>)
 800077a:	f001 fe2f 	bl	80023dc <HAL_TIM_PWM_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8000784:	f000 fa3a 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8000788:	4803      	ldr	r0, [pc, #12]	; (8000798 <MX_TIM11_Init+0x94>)
 800078a:	f000 fac1 	bl	8000d10 <HAL_TIM_MspPostInit>

}
 800078e:	bf00      	nop
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000c8 	.word	0x200000c8
 800079c:	40014800 	.word	0x40014800

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b48      	ldr	r3, [pc, #288]	; (80008dc <MX_GPIO_Init+0x13c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a47      	ldr	r2, [pc, #284]	; (80008dc <MX_GPIO_Init+0x13c>)
 80007c0:	f043 0310 	orr.w	r3, r3, #16
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b45      	ldr	r3, [pc, #276]	; (80008dc <MX_GPIO_Init+0x13c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0310 	and.w	r3, r3, #16
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b41      	ldr	r3, [pc, #260]	; (80008dc <MX_GPIO_Init+0x13c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a40      	ldr	r2, [pc, #256]	; (80008dc <MX_GPIO_Init+0x13c>)
 80007dc:	f043 0320 	orr.w	r3, r3, #32
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b3e      	ldr	r3, [pc, #248]	; (80008dc <MX_GPIO_Init+0x13c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0320 	and.w	r3, r3, #32
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b3a      	ldr	r3, [pc, #232]	; (80008dc <MX_GPIO_Init+0x13c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a39      	ldr	r2, [pc, #228]	; (80008dc <MX_GPIO_Init+0x13c>)
 80007f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b37      	ldr	r3, [pc, #220]	; (80008dc <MX_GPIO_Init+0x13c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2140      	movs	r1, #64	; 0x40
 800080e:	4834      	ldr	r0, [pc, #208]	; (80008e0 <MX_GPIO_Init+0x140>)
 8000810:	f000 fea4 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	21c0      	movs	r1, #192	; 0xc0
 8000818:	4832      	ldr	r0, [pc, #200]	; (80008e4 <MX_GPIO_Init+0x144>)
 800081a:	f000 fe9f 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Z_Pin A_Pin */
  GPIO_InitStruct.Pin = Z_Pin|A_Pin;
 800081e:	2330      	movs	r3, #48	; 0x30
 8000820:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000822:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	4619      	mov	r1, r3
 8000832:	482d      	ldr	r0, [pc, #180]	; (80008e8 <MX_GPIO_Init+0x148>)
 8000834:	f000 fcde 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_Pin */
  GPIO_InitStruct.Pin = B_Pin;
 8000838:	2340      	movs	r3, #64	; 0x40
 800083a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	4619      	mov	r1, r3
 800084a:	4827      	ldr	r0, [pc, #156]	; (80008e8 <MX_GPIO_Init+0x148>)
 800084c:	f000 fcd2 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : K_Pin */
  GPIO_InitStruct.Pin = K_Pin;
 8000850:	2304      	movs	r3, #4
 8000852:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000854:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(K_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	4619      	mov	r1, r3
 8000864:	481e      	ldr	r0, [pc, #120]	; (80008e0 <MX_GPIO_Init+0x140>)
 8000866:	f000 fcc5 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800086a:	2340      	movs	r3, #64	; 0x40
 800086c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	4619      	mov	r1, r3
 8000880:	4817      	ldr	r0, [pc, #92]	; (80008e0 <MX_GPIO_Init+0x140>)
 8000882:	f000 fcb7 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000886:	23c0      	movs	r3, #192	; 0xc0
 8000888:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	4619      	mov	r1, r3
 800089c:	4811      	ldr	r0, [pc, #68]	; (80008e4 <MX_GPIO_Init+0x144>)
 800089e:	f000 fca9 	bl	80011f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	2008      	movs	r0, #8
 80008a8:	f000 fc6d 	bl	8001186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80008ac:	2008      	movs	r0, #8
 80008ae:	f000 fc86 	bl	80011be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	200a      	movs	r0, #10
 80008b8:	f000 fc65 	bl	8001186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80008bc:	200a      	movs	r0, #10
 80008be:	f000 fc7e 	bl	80011be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	2017      	movs	r0, #23
 80008c8:	f000 fc5d 	bl	8001186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008cc:	2017      	movs	r0, #23
 80008ce:	f000 fc76 	bl	80011be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d2:	bf00      	nop
 80008d4:	3720      	adds	r7, #32
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40021400 	.word	0x40021400
 80008e4:	40021800 	.word	0x40021800
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == A_Pin)
 80008f6:	88fb      	ldrh	r3, [r7, #6]
 80008f8:	2b20      	cmp	r3, #32
 80008fa:	d129      	bne.n	8000950 <HAL_GPIO_EXTI_Callback+0x64>
	{
		counter = counter + 1;
 80008fc:	4b25      	ldr	r3, [pc, #148]	; (8000994 <HAL_GPIO_EXTI_Callback+0xa8>)
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	3301      	adds	r3, #1
 8000902:	b29a      	uxth	r2, r3
 8000904:	4b23      	ldr	r3, [pc, #140]	; (8000994 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000906:	801a      	strh	r2, [r3, #0]
		dir = HAL_GPIO_ReadPin(B_GPIO_Port, B_Pin);
 8000908:	2140      	movs	r1, #64	; 0x40
 800090a:	4823      	ldr	r0, [pc, #140]	; (8000998 <HAL_GPIO_EXTI_Callback+0xac>)
 800090c:	f000 fe0e 	bl	800152c <HAL_GPIO_ReadPin>
 8000910:	4603      	mov	r3, r0
 8000912:	461a      	mov	r2, r3
 8000914:	4b21      	ldr	r3, [pc, #132]	; (800099c <HAL_GPIO_EXTI_Callback+0xb0>)
 8000916:	601a      	str	r2, [r3, #0]
		if (dir == 1){
 8000918:	4b20      	ldr	r3, [pc, #128]	; (800099c <HAL_GPIO_EXTI_Callback+0xb0>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d10e      	bne.n	800093e <HAL_GPIO_EXTI_Callback+0x52>
			pos_counter = pos_counter - (1);
 8000920:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	3b01      	subs	r3, #1
 8000926:	4a1e      	ldr	r2, [pc, #120]	; (80009a0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000928:	6013      	str	r3, [r2, #0]
			if(pos_counter == -1){
 800092a:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <HAL_GPIO_EXTI_Callback+0xb4>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000932:	d10d      	bne.n	8000950 <HAL_GPIO_EXTI_Callback+0x64>
				pos_counter = 1023;
 8000934:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000936:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	e008      	b.n	8000950 <HAL_GPIO_EXTI_Callback+0x64>
			}
			//pos = pos + (360/1024);
		}
		else if (dir == 0){
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <HAL_GPIO_EXTI_Callback+0xb0>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d104      	bne.n	8000950 <HAL_GPIO_EXTI_Callback+0x64>
			pos_counter = pos_counter + (1);
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	3301      	adds	r3, #1
 800094c:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <HAL_GPIO_EXTI_Callback+0xb4>)
 800094e:	6013      	str	r3, [r2, #0]
		}
	}

	if (GPIO_Pin == Z_Pin)
 8000950:	88fb      	ldrh	r3, [r7, #6]
 8000952:	2b10      	cmp	r3, #16
 8000954:	d102      	bne.n	800095c <HAL_GPIO_EXTI_Callback+0x70>
	{
		pos_counter = 0;
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
	}
	pos = ((pos_counter * 360) / 1024);
 800095c:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_GPIO_EXTI_Callback+0xb4>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000964:	fb02 f303 	mul.w	r3, r2, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	da01      	bge.n	8000970 <HAL_GPIO_EXTI_Callback+0x84>
 800096c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000970:	129b      	asrs	r3, r3, #10
 8000972:	ee07 3a90 	vmov	s15, r3
 8000976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <HAL_GPIO_EXTI_Callback+0xb8>)
 800097c:	edc3 7a00 	vstr	s15, [r3]


	if(GPIO_Pin == K_Pin){
 8000980:	88fb      	ldrh	r3, [r7, #6]
 8000982:	2b04      	cmp	r3, #4
 8000984:	d102      	bne.n	800098c <HAL_GPIO_EXTI_Callback+0xa0>
		state = INIT2;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
	}


}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000110 	.word	0x20000110
 8000998:	40021000 	.word	0x40021000
 800099c:	20000120 	.word	0x20000120
 80009a0:	20000114 	.word	0x20000114
 80009a4:	20000118 	.word	0x20000118
 80009a8:	20000136 	.word	0x20000136

080009ac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a3a      	ldr	r2, [pc, #232]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d111      	bne.n	80009e2 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		speed = ((counter * 12000) / 1024);
 80009be:	4b3a      	ldr	r3, [pc, #232]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	461a      	mov	r2, r3
 80009c4:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80009c8:	fb02 f303 	mul.w	r3, r2, r3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	da01      	bge.n	80009d4 <HAL_TIM_PeriodElapsedCallback+0x28>
 80009d0:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80009d4:	129b      	asrs	r3, r3, #10
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	4b34      	ldr	r3, [pc, #208]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x100>)
 80009da:	801a      	strh	r2, [r3, #0]
		counter = 0;
 80009dc:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80009de:	2200      	movs	r2, #0
 80009e0:	801a      	strh	r2, [r3, #0]
//				Tau_value = Tau_value + 5;
//			}
//		}
	}

	if (htim->Instance == TIM7)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a32      	ldr	r2, [pc, #200]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d157      	bne.n	8000a9c <HAL_TIM_PeriodElapsedCallback+0xf0>
	{
		if(state == INIT2){
 80009ec:	4b31      	ldr	r3, [pc, #196]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d153      	bne.n	8000a9c <HAL_TIM_PeriodElapsedCallback+0xf0>
			ek = Setpoint - speed;
 80009f4:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80009f6:	ed93 7a00 	vldr	s14, [r3]
 80009fa:	4b2c      	ldr	r3, [pc, #176]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x100>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	ee07 3a90 	vmov	s15, r3
 8000a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a0a:	4b2c      	ldr	r3, [pc, #176]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a0c:	edc3 7a00 	vstr	s15, [r3]
			uk = uk_1 + ek * (1000*Kp + Ki * Ts)/1000 - ek_1 * Kp;
 8000a10:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000a12:	edd3 7a00 	vldr	s15, [r3]
 8000a16:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000ac4 <HAL_TIM_PeriodElapsedCallback+0x118>
 8000a1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000a20:	edd3 6a00 	vldr	s13, [r3]
 8000a24:	4b29      	ldr	r3, [pc, #164]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000a26:	edd3 7a00 	vldr	s15, [r3]
 8000a2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a32:	4b22      	ldr	r3, [pc, #136]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a34:	edd3 7a00 	vldr	s15, [r3]
 8000a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a3c:	eddf 6a21 	vldr	s13, [pc, #132]	; 8000ac4 <HAL_TIM_PeriodElapsedCallback+0x118>
 8000a40:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a44:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000a46:	edd3 7a00 	vldr	s15, [r3]
 8000a4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a4e:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000a50:	edd3 6a00 	vldr	s13, [r3]
 8000a54:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000a56:	edd3 7a00 	vldr	s15, [r3]
 8000a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a62:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000a64:	edc3 7a00 	vstr	s15, [r3]
			ek_1 = ek;
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a19      	ldr	r2, [pc, #100]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000a6e:	6013      	str	r3, [r2, #0]
			uk_1 = uk;
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a16      	ldr	r2, [pc, #88]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000a76:	6013      	str	r3, [r2, #0]

			Vout2PWM(uk);
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000a7a:	edd3 7a00 	vldr	s15, [r3]
 8000a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a82:	f000 f867 	bl	8000b54 <Vout2PWM>

			setDir(dir);
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 f829 	bl	8000ae4 <setDir>
			setDuty(duty);
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f840 	bl	8000b1c <setDuty>
//			}
//			speed_previous = speed;
//		}
//	}

}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40001000 	.word	0x40001000
 8000aa8:	20000110 	.word	0x20000110
 8000aac:	2000011c 	.word	0x2000011c
 8000ab0:	40001400 	.word	0x40001400
 8000ab4:	20000136 	.word	0x20000136
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000128 	.word	0x20000128
 8000ac0:	20000004 	.word	0x20000004
 8000ac4:	447a0000 	.word	0x447a0000
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	2000000c 	.word	0x2000000c
 8000ad0:	2000012c 	.word	0x2000012c
 8000ad4:	20000124 	.word	0x20000124
 8000ad8:	20000130 	.word	0x20000130
 8000adc:	20000120 	.word	0x20000120
 8000ae0:	20000134 	.word	0x20000134

08000ae4 <setDir>:
//	return OK;
//}



void setDir(uint8_t dir){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
	if(dir == 0){
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d104      	bne.n	8000afe <setDir+0x1a>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2140      	movs	r1, #64	; 0x40
 8000af8:	4807      	ldr	r0, [pc, #28]	; (8000b18 <setDir+0x34>)
 8000afa:	f000 fd2f 	bl	800155c <HAL_GPIO_WritePin>
	}
	if(dir == 1){
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d104      	bne.n	8000b0e <setDir+0x2a>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, 1);
 8000b04:	2201      	movs	r2, #1
 8000b06:	2140      	movs	r1, #64	; 0x40
 8000b08:	4803      	ldr	r0, [pc, #12]	; (8000b18 <setDir+0x34>)
 8000b0a:	f000 fd27 	bl	800155c <HAL_GPIO_WritePin>
	}
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40021400 	.word	0x40021400

08000b1c <setDuty>:

void setDuty(uint16_t duty){
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
	TIM11->CCR1 = (duty * 1119) / 1000;
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	f240 425f 	movw	r2, #1119	; 0x45f
 8000b2c:	fb02 f303 	mul.w	r3, r2, r3
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <setDuty+0x30>)
 8000b32:	fb82 1203 	smull	r1, r2, r2, r3
 8000b36:	1192      	asrs	r2, r2, #6
 8000b38:	17db      	asrs	r3, r3, #31
 8000b3a:	1ad2      	subs	r2, r2, r3
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <setDuty+0x34>)
 8000b3e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	10624dd3 	.word	0x10624dd3
 8000b50:	40014800 	.word	0x40014800

08000b54 <Vout2PWM>:

void setTs(uint8_t Ts){
	TIM7->ARR = ((Ts * (84000000 / (839 + 1))) / 1000) - 1;
} // 839 : PSC

void Vout2PWM(float u){
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u > 12){
 8000b5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b62:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b6e:	dd02      	ble.n	8000b76 <Vout2PWM+0x22>
		u = 12;
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <Vout2PWM+0x94>)
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	e00a      	b.n	8000b8c <Vout2PWM+0x38>
	}
	else if(u < -12){
 8000b76:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b7a:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
 8000b7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b86:	d501      	bpl.n	8000b8c <Vout2PWM+0x38>
		u = -12;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <Vout2PWM+0x98>)
 8000b8a:	607b      	str	r3, [r7, #4]
	}

	duty = (u * 1000) / 12;
 8000b8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b90:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000bf0 <Vout2PWM+0x9c>
 8000b94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b98:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8000b9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ba4:	ee17 3a90 	vmov	r3, s15
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <Vout2PWM+0xa0>)
 8000bac:	801a      	strh	r2, [r3, #0]

	if(u > 0){
 8000bae:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bba:	dd03      	ble.n	8000bc4 <Vout2PWM+0x70>
		dir = 0;
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <Vout2PWM+0xa4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
	}
	else if(u <= 0){
		dir = 1;
	}
}
 8000bc2:	e00a      	b.n	8000bda <Vout2PWM+0x86>
	else if(u <= 0){
 8000bc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd0:	d900      	bls.n	8000bd4 <Vout2PWM+0x80>
}
 8000bd2:	e002      	b.n	8000bda <Vout2PWM+0x86>
		dir = 1;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <Vout2PWM+0xa4>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	601a      	str	r2, [r3, #0]
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	41400000 	.word	0x41400000
 8000bec:	c1400000 	.word	0xc1400000
 8000bf0:	447a0000 	.word	0x447a0000
 8000bf4:	20000134 	.word	0x20000134
 8000bf8:	20000120 	.word	0x20000120

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <Error_Handler+0x8>
	...

08000c08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800

08000c58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a26      	ldr	r2, [pc, #152]	; (8000d00 <HAL_TIM_Base_MspInit+0xa8>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d116      	bne.n	8000c98 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <HAL_TIM_Base_MspInit+0xac>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a24      	ldr	r2, [pc, #144]	; (8000d04 <HAL_TIM_Base_MspInit+0xac>)
 8000c74:	f043 0310 	orr.w	r3, r3, #16
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <HAL_TIM_Base_MspInit+0xac>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f003 0310 	and.w	r3, r3, #16
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2036      	movs	r0, #54	; 0x36
 8000c8c:	f000 fa7b 	bl	8001186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c90:	2036      	movs	r0, #54	; 0x36
 8000c92:	f000 fa94 	bl	80011be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000c96:	e02e      	b.n	8000cf6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM7)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a1a      	ldr	r2, [pc, #104]	; (8000d08 <HAL_TIM_Base_MspInit+0xb0>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d116      	bne.n	8000cd0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <HAL_TIM_Base_MspInit+0xac>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a16      	ldr	r2, [pc, #88]	; (8000d04 <HAL_TIM_Base_MspInit+0xac>)
 8000cac:	f043 0320 	orr.w	r3, r3, #32
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <HAL_TIM_Base_MspInit+0xac>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f003 0320 	and.w	r3, r3, #32
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2037      	movs	r0, #55	; 0x37
 8000cc4:	f000 fa5f 	bl	8001186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000cc8:	2037      	movs	r0, #55	; 0x37
 8000cca:	f000 fa78 	bl	80011be <HAL_NVIC_EnableIRQ>
}
 8000cce:	e012      	b.n	8000cf6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <HAL_TIM_Base_MspInit+0xb4>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d10d      	bne.n	8000cf6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_TIM_Base_MspInit+0xac>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <HAL_TIM_Base_MspInit+0xac>)
 8000ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_TIM_Base_MspInit+0xac>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40001000 	.word	0x40001000
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40001400 	.word	0x40001400
 8000d0c:	40014800 	.word	0x40014800

08000d10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM11)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <HAL_TIM_MspPostInit+0x68>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d11d      	bne.n	8000d6e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_TIM_MspPostInit+0x6c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <HAL_TIM_MspPostInit+0x6c>)
 8000d3c:	f043 0320 	orr.w	r3, r3, #32
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_TIM_MspPostInit+0x6c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0320 	and.w	r3, r3, #32
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PF7     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <HAL_TIM_MspPostInit+0x70>)
 8000d6a:	f000 fa43 	bl	80011f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3720      	adds	r7, #32
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40014800 	.word	0x40014800
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40021400 	.word	0x40021400

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f8ba 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(K_Pin);
 8000ddc:	2004      	movs	r0, #4
 8000dde:	f000 fbd7 	bl	8001590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Z_Pin);
 8000dea:	2010      	movs	r0, #16
 8000dec:	f000 fbd0 	bl	8001590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A_Pin);
 8000df8:	2020      	movs	r0, #32
 8000dfa:	f000 fbc9 	bl	8001590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <TIM6_DAC_IRQHandler+0x10>)
 8000e0a:	f001 f9df 	bl	80021cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000038 	.word	0x20000038

08000e18 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <TIM7_IRQHandler+0x10>)
 8000e1e:	f001 f9d5 	bl	80021cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000080 	.word	0x20000080

08000e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <SystemInit+0x20>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <SystemInit+0x20>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e56:	490e      	ldr	r1, [pc, #56]	; (8000e90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e58:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e6c:	4c0b      	ldr	r4, [pc, #44]	; (8000e9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e7a:	f7ff ffd7 	bl	8000e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f001 fe9d 	bl	8002bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e82:	f7ff fb23 	bl	80004cc <main>
  bx  lr    
 8000e86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000e94:	08002c4c 	.word	0x08002c4c
  ldr r2, =_sbss
 8000e98:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000e9c:	2000013c 	.word	0x2000013c

08000ea0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC_IRQHandler>
	...

08000ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <HAL_Init+0x40>)
 8000eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <HAL_Init+0x40>)
 8000eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <HAL_Init+0x40>)
 8000ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 f94f 	bl	8001170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed2:	200f      	movs	r0, #15
 8000ed4:	f000 f808 	bl	8000ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed8:	f7ff fe96 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023c00 	.word	0x40023c00

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_InitTick+0x54>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_InitTick+0x58>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f967 	bl	80011da <HAL_SYSTICK_Config>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00e      	b.n	8000f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d80a      	bhi.n	8000f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f000 f92f 	bl	8001186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f28:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <HAL_InitTick+0x5c>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e000      	b.n	8000f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000010 	.word	0x20000010
 8000f40:	20000018 	.word	0x20000018
 8000f44:	20000014 	.word	0x20000014

08000f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x20>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x24>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_IncTick+0x24>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000018 	.word	0x20000018
 8000f6c:	20000138 	.word	0x20000138

08000f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_GetTick+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000138 	.word	0x20000138

08000f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff ffee 	bl	8000f70 <HAL_GetTick>
 8000f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa0:	d005      	beq.n	8000fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_Delay+0x44>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fae:	bf00      	nop
 8000fb0:	f7ff ffde 	bl	8000f70 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d8f7      	bhi.n	8000fb0 <HAL_Delay+0x28>
  {
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000018 	.word	0x20000018

08000fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <__NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	2b00      	cmp	r3, #0
 8001044:	db0b      	blt.n	800105e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	f003 021f 	and.w	r2, r3, #31
 800104c:	4907      	ldr	r1, [pc, #28]	; (800106c <__NVIC_EnableIRQ+0x38>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	2001      	movs	r0, #1
 8001056:	fa00 f202 	lsl.w	r2, r0, r2
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db0a      	blt.n	800109a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	490c      	ldr	r1, [pc, #48]	; (80010bc <__NVIC_SetPriority+0x4c>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	0112      	lsls	r2, r2, #4
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	440b      	add	r3, r1
 8001094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001098:	e00a      	b.n	80010b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4908      	ldr	r1, [pc, #32]	; (80010c0 <__NVIC_SetPriority+0x50>)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	3b04      	subs	r3, #4
 80010a8:	0112      	lsls	r2, r2, #4
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	440b      	add	r3, r1
 80010ae:	761a      	strb	r2, [r3, #24]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43da      	mvns	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43d9      	mvns	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	4313      	orrs	r3, r2
         );
}
 800111e:	4618      	mov	r0, r3
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800113c:	d301      	bcc.n	8001142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113e:	2301      	movs	r3, #1
 8001140:	e00f      	b.n	8001162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <SysTick_Config+0x40>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114a:	210f      	movs	r1, #15
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f7ff ff8e 	bl	8001070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <SysTick_Config+0x40>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115a:	4b04      	ldr	r3, [pc, #16]	; (800116c <SysTick_Config+0x40>)
 800115c:	2207      	movs	r2, #7
 800115e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	e000e010 	.word	0xe000e010

08001170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff29 	bl	8000fd0 <__NVIC_SetPriorityGrouping>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001198:	f7ff ff3e 	bl	8001018 <__NVIC_GetPriorityGrouping>
 800119c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f7ff ff8e 	bl	80010c4 <NVIC_EncodePriority>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff5d 	bl	8001070 <__NVIC_SetPriority>
}
 80011b6:	bf00      	nop
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff31 	bl	8001034 <__NVIC_EnableIRQ>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ffa2 	bl	800112c <SysTick_Config>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
 800120e:	e16b      	b.n	80014e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001210:	2201      	movs	r2, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	429a      	cmp	r2, r3
 800122a:	f040 815a 	bne.w	80014e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	2b01      	cmp	r3, #1
 8001238:	d005      	beq.n	8001246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001242:	2b02      	cmp	r3, #2
 8001244:	d130      	bne.n	80012a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800127c:	2201      	movs	r2, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	f003 0201 	and.w	r2, r3, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d017      	beq.n	80012e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d123      	bne.n	8001338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	08da      	lsrs	r2, r3, #3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3208      	adds	r2, #8
 80012f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	691a      	ldr	r2, [r3, #16]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	08da      	lsrs	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3208      	adds	r2, #8
 8001332:	69b9      	ldr	r1, [r7, #24]
 8001334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2203      	movs	r2, #3
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0203 	and.w	r2, r3, #3
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 80b4 	beq.w	80014e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b60      	ldr	r3, [pc, #384]	; (8001500 <HAL_GPIO_Init+0x30c>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a5f      	ldr	r2, [pc, #380]	; (8001500 <HAL_GPIO_Init+0x30c>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b5d      	ldr	r3, [pc, #372]	; (8001500 <HAL_GPIO_Init+0x30c>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001396:	4a5b      	ldr	r2, [pc, #364]	; (8001504 <HAL_GPIO_Init+0x310>)
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	3302      	adds	r3, #2
 800139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	220f      	movs	r2, #15
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a52      	ldr	r2, [pc, #328]	; (8001508 <HAL_GPIO_Init+0x314>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d02b      	beq.n	800141a <HAL_GPIO_Init+0x226>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a51      	ldr	r2, [pc, #324]	; (800150c <HAL_GPIO_Init+0x318>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d025      	beq.n	8001416 <HAL_GPIO_Init+0x222>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a50      	ldr	r2, [pc, #320]	; (8001510 <HAL_GPIO_Init+0x31c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d01f      	beq.n	8001412 <HAL_GPIO_Init+0x21e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4f      	ldr	r2, [pc, #316]	; (8001514 <HAL_GPIO_Init+0x320>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d019      	beq.n	800140e <HAL_GPIO_Init+0x21a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4e      	ldr	r2, [pc, #312]	; (8001518 <HAL_GPIO_Init+0x324>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d013      	beq.n	800140a <HAL_GPIO_Init+0x216>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4d      	ldr	r2, [pc, #308]	; (800151c <HAL_GPIO_Init+0x328>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d00d      	beq.n	8001406 <HAL_GPIO_Init+0x212>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4c      	ldr	r2, [pc, #304]	; (8001520 <HAL_GPIO_Init+0x32c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d007      	beq.n	8001402 <HAL_GPIO_Init+0x20e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4b      	ldr	r2, [pc, #300]	; (8001524 <HAL_GPIO_Init+0x330>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d101      	bne.n	80013fe <HAL_GPIO_Init+0x20a>
 80013fa:	2307      	movs	r3, #7
 80013fc:	e00e      	b.n	800141c <HAL_GPIO_Init+0x228>
 80013fe:	2308      	movs	r3, #8
 8001400:	e00c      	b.n	800141c <HAL_GPIO_Init+0x228>
 8001402:	2306      	movs	r3, #6
 8001404:	e00a      	b.n	800141c <HAL_GPIO_Init+0x228>
 8001406:	2305      	movs	r3, #5
 8001408:	e008      	b.n	800141c <HAL_GPIO_Init+0x228>
 800140a:	2304      	movs	r3, #4
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x228>
 800140e:	2303      	movs	r3, #3
 8001410:	e004      	b.n	800141c <HAL_GPIO_Init+0x228>
 8001412:	2302      	movs	r3, #2
 8001414:	e002      	b.n	800141c <HAL_GPIO_Init+0x228>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <HAL_GPIO_Init+0x228>
 800141a:	2300      	movs	r3, #0
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	f002 0203 	and.w	r2, r2, #3
 8001422:	0092      	lsls	r2, r2, #2
 8001424:	4093      	lsls	r3, r2
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800142c:	4935      	ldr	r1, [pc, #212]	; (8001504 <HAL_GPIO_Init+0x310>)
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	3302      	adds	r3, #2
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800143a:	4b3b      	ldr	r3, [pc, #236]	; (8001528 <HAL_GPIO_Init+0x334>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800145e:	4a32      	ldr	r2, [pc, #200]	; (8001528 <HAL_GPIO_Init+0x334>)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001464:	4b30      	ldr	r3, [pc, #192]	; (8001528 <HAL_GPIO_Init+0x334>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001488:	4a27      	ldr	r2, [pc, #156]	; (8001528 <HAL_GPIO_Init+0x334>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800148e:	4b26      	ldr	r3, [pc, #152]	; (8001528 <HAL_GPIO_Init+0x334>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014b2:	4a1d      	ldr	r2, [pc, #116]	; (8001528 <HAL_GPIO_Init+0x334>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_GPIO_Init+0x334>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014dc:	4a12      	ldr	r2, [pc, #72]	; (8001528 <HAL_GPIO_Init+0x334>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3301      	adds	r3, #1
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	2b0f      	cmp	r3, #15
 80014ec:	f67f ae90 	bls.w	8001210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40013800 	.word	0x40013800
 8001508:	40020000 	.word	0x40020000
 800150c:	40020400 	.word	0x40020400
 8001510:	40020800 	.word	0x40020800
 8001514:	40020c00 	.word	0x40020c00
 8001518:	40021000 	.word	0x40021000
 800151c:	40021400 	.word	0x40021400
 8001520:	40021800 	.word	0x40021800
 8001524:	40021c00 	.word	0x40021c00
 8001528:	40013c00 	.word	0x40013c00

0800152c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	887b      	ldrh	r3, [r7, #2]
 800153e:	4013      	ands	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001544:	2301      	movs	r3, #1
 8001546:	73fb      	strb	r3, [r7, #15]
 8001548:	e001      	b.n	800154e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
 8001568:	4613      	mov	r3, r2
 800156a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800156c:	787b      	ldrb	r3, [r7, #1]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001578:	e003      	b.n	8001582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800157a:	887b      	ldrh	r3, [r7, #2]
 800157c:	041a      	lsls	r2, r3, #16
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	619a      	str	r2, [r3, #24]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800159c:	695a      	ldr	r2, [r3, #20]
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d006      	beq.n	80015b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015a8:	88fb      	ldrh	r3, [r7, #6]
 80015aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff f99c 	bl	80008ec <HAL_GPIO_EXTI_Callback>
  }
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40013c00 	.word	0x40013c00

080015c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e267      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d075      	beq.n	80016ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015de:	4b88      	ldr	r3, [pc, #544]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d00c      	beq.n	8001604 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ea:	4b85      	ldr	r3, [pc, #532]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d112      	bne.n	800161c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015f6:	4b82      	ldr	r3, [pc, #520]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001602:	d10b      	bne.n	800161c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001604:	4b7e      	ldr	r3, [pc, #504]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d05b      	beq.n	80016c8 <HAL_RCC_OscConfig+0x108>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d157      	bne.n	80016c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e242      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001624:	d106      	bne.n	8001634 <HAL_RCC_OscConfig+0x74>
 8001626:	4b76      	ldr	r3, [pc, #472]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a75      	ldr	r2, [pc, #468]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 800162c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e01d      	b.n	8001670 <HAL_RCC_OscConfig+0xb0>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x98>
 800163e:	4b70      	ldr	r3, [pc, #448]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a6f      	ldr	r2, [pc, #444]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	4b6d      	ldr	r3, [pc, #436]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a6c      	ldr	r2, [pc, #432]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e00b      	b.n	8001670 <HAL_RCC_OscConfig+0xb0>
 8001658:	4b69      	ldr	r3, [pc, #420]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a68      	ldr	r2, [pc, #416]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 800165e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b66      	ldr	r3, [pc, #408]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a65      	ldr	r2, [pc, #404]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 800166a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800166e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d013      	beq.n	80016a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fc7a 	bl	8000f70 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001680:	f7ff fc76 	bl	8000f70 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	; 0x64
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e207      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	4b5b      	ldr	r3, [pc, #364]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0xc0>
 800169e:	e014      	b.n	80016ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fc66 	bl	8000f70 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a8:	f7ff fc62 	bl	8000f70 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b64      	cmp	r3, #100	; 0x64
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e1f3      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ba:	4b51      	ldr	r3, [pc, #324]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0xe8>
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d063      	beq.n	800179e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016d6:	4b4a      	ldr	r3, [pc, #296]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00b      	beq.n	80016fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016e2:	4b47      	ldr	r3, [pc, #284]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d11c      	bne.n	8001728 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ee:	4b44      	ldr	r3, [pc, #272]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d116      	bne.n	8001728 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fa:	4b41      	ldr	r3, [pc, #260]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d005      	beq.n	8001712 <HAL_RCC_OscConfig+0x152>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d001      	beq.n	8001712 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e1c7      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001712:	4b3b      	ldr	r3, [pc, #236]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	4937      	ldr	r1, [pc, #220]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001722:	4313      	orrs	r3, r2
 8001724:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001726:	e03a      	b.n	800179e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d020      	beq.n	8001772 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001730:	4b34      	ldr	r3, [pc, #208]	; (8001804 <HAL_RCC_OscConfig+0x244>)
 8001732:	2201      	movs	r2, #1
 8001734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001736:	f7ff fc1b 	bl	8000f70 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800173e:	f7ff fc17 	bl	8000f70 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e1a8      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001750:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175c:	4b28      	ldr	r3, [pc, #160]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	4925      	ldr	r1, [pc, #148]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 800176c:	4313      	orrs	r3, r2
 800176e:	600b      	str	r3, [r1, #0]
 8001770:	e015      	b.n	800179e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001772:	4b24      	ldr	r3, [pc, #144]	; (8001804 <HAL_RCC_OscConfig+0x244>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7ff fbfa 	bl	8000f70 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001780:	f7ff fbf6 	bl	8000f70 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e187      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d036      	beq.n	8001818 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d016      	beq.n	80017e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_RCC_OscConfig+0x248>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b8:	f7ff fbda 	bl	8000f70 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c0:	f7ff fbd6 	bl	8000f70 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e167      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 80017d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x200>
 80017de:	e01b      	b.n	8001818 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_RCC_OscConfig+0x248>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e6:	f7ff fbc3 	bl	8000f70 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ec:	e00e      	b.n	800180c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ee:	f7ff fbbf 	bl	8000f70 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d907      	bls.n	800180c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e150      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
 8001800:	40023800 	.word	0x40023800
 8001804:	42470000 	.word	0x42470000
 8001808:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180c:	4b88      	ldr	r3, [pc, #544]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 800180e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1ea      	bne.n	80017ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 8097 	beq.w	8001954 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001826:	2300      	movs	r3, #0
 8001828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182a:	4b81      	ldr	r3, [pc, #516]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10f      	bne.n	8001856 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	4b7d      	ldr	r3, [pc, #500]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a7c      	ldr	r2, [pc, #496]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b7a      	ldr	r3, [pc, #488]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001852:	2301      	movs	r3, #1
 8001854:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001856:	4b77      	ldr	r3, [pc, #476]	; (8001a34 <HAL_RCC_OscConfig+0x474>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d118      	bne.n	8001894 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001862:	4b74      	ldr	r3, [pc, #464]	; (8001a34 <HAL_RCC_OscConfig+0x474>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a73      	ldr	r2, [pc, #460]	; (8001a34 <HAL_RCC_OscConfig+0x474>)
 8001868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186e:	f7ff fb7f 	bl	8000f70 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001876:	f7ff fb7b 	bl	8000f70 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e10c      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	4b6a      	ldr	r3, [pc, #424]	; (8001a34 <HAL_RCC_OscConfig+0x474>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x2ea>
 800189c:	4b64      	ldr	r3, [pc, #400]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 800189e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a0:	4a63      	ldr	r2, [pc, #396]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6713      	str	r3, [r2, #112]	; 0x70
 80018a8:	e01c      	b.n	80018e4 <HAL_RCC_OscConfig+0x324>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b05      	cmp	r3, #5
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0x30c>
 80018b2:	4b5f      	ldr	r3, [pc, #380]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80018b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b6:	4a5e      	ldr	r2, [pc, #376]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	6713      	str	r3, [r2, #112]	; 0x70
 80018be:	4b5c      	ldr	r3, [pc, #368]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80018c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c2:	4a5b      	ldr	r2, [pc, #364]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ca:	e00b      	b.n	80018e4 <HAL_RCC_OscConfig+0x324>
 80018cc:	4b58      	ldr	r3, [pc, #352]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80018ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d0:	4a57      	ldr	r2, [pc, #348]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80018d2:	f023 0301 	bic.w	r3, r3, #1
 80018d6:	6713      	str	r3, [r2, #112]	; 0x70
 80018d8:	4b55      	ldr	r3, [pc, #340]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80018da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018dc:	4a54      	ldr	r2, [pc, #336]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80018de:	f023 0304 	bic.w	r3, r3, #4
 80018e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d015      	beq.n	8001918 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ec:	f7ff fb40 	bl	8000f70 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f2:	e00a      	b.n	800190a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f4:	f7ff fb3c 	bl	8000f70 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e0cb      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190a:	4b49      	ldr	r3, [pc, #292]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 800190c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0ee      	beq.n	80018f4 <HAL_RCC_OscConfig+0x334>
 8001916:	e014      	b.n	8001942 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001918:	f7ff fb2a 	bl	8000f70 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800191e:	e00a      	b.n	8001936 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001920:	f7ff fb26 	bl	8000f70 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	; 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e0b5      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001936:	4b3e      	ldr	r3, [pc, #248]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1ee      	bne.n	8001920 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001942:	7dfb      	ldrb	r3, [r7, #23]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d105      	bne.n	8001954 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001948:	4b39      	ldr	r3, [pc, #228]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	4a38      	ldr	r2, [pc, #224]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 800194e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001952:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80a1 	beq.w	8001aa0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800195e:	4b34      	ldr	r3, [pc, #208]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b08      	cmp	r3, #8
 8001968:	d05c      	beq.n	8001a24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d141      	bne.n	80019f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001972:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <HAL_RCC_OscConfig+0x478>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff fafa 	bl	8000f70 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001980:	f7ff faf6 	bl	8000f70 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e087      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001992:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69da      	ldr	r2, [r3, #28]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	019b      	lsls	r3, r3, #6
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	085b      	lsrs	r3, r3, #1
 80019b6:	3b01      	subs	r3, #1
 80019b8:	041b      	lsls	r3, r3, #16
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c0:	061b      	lsls	r3, r3, #24
 80019c2:	491b      	ldr	r1, [pc, #108]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_RCC_OscConfig+0x478>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ce:	f7ff facf 	bl	8000f70 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d6:	f7ff facb 	bl	8000f70 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e05c      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x416>
 80019f4:	e054      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <HAL_RCC_OscConfig+0x478>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7ff fab8 	bl	8000f70 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a04:	f7ff fab4 	bl	8000f70 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e045      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x444>
 8001a22:	e03d      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d107      	bne.n	8001a3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e038      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40007000 	.word	0x40007000
 8001a38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <HAL_RCC_OscConfig+0x4ec>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d028      	beq.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d121      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d11a      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d111      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	085b      	lsrs	r3, r3, #1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d107      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800

08001ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0cc      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b68      	ldr	r3, [pc, #416]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d90c      	bls.n	8001aec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b65      	ldr	r3, [pc, #404]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b63      	ldr	r3, [pc, #396]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0b8      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d020      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b04:	4b59      	ldr	r3, [pc, #356]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4a58      	ldr	r2, [pc, #352]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b1c:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4a52      	ldr	r2, [pc, #328]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b28:	4b50      	ldr	r3, [pc, #320]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	494d      	ldr	r1, [pc, #308]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d044      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d107      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d119      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e07f      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d003      	beq.n	8001b6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6e:	4b3f      	ldr	r3, [pc, #252]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d109      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e06f      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7e:	4b3b      	ldr	r3, [pc, #236]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e067      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b8e:	4b37      	ldr	r3, [pc, #220]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f023 0203 	bic.w	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	4934      	ldr	r1, [pc, #208]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba0:	f7ff f9e6 	bl	8000f70 <HAL_GetTick>
 8001ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba6:	e00a      	b.n	8001bbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba8:	f7ff f9e2 	bl	8000f70 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e04f      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 020c 	and.w	r2, r3, #12
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d1eb      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d20c      	bcs.n	8001bf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e032      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	4916      	ldr	r1, [pc, #88]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d009      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	490e      	ldr	r1, [pc, #56]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c36:	f000 f821 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	490a      	ldr	r1, [pc, #40]	; (8001c70 <HAL_RCC_ClockConfig+0x1c0>)
 8001c48:	5ccb      	ldrb	r3, [r1, r3]
 8001c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4e:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff f946 	bl	8000ee8 <HAL_InitTick>

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	08002c2c 	.word	0x08002c2c
 8001c74:	20000010 	.word	0x20000010
 8001c78:	20000014 	.word	0x20000014

08001c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c80:	b090      	sub	sp, #64	; 0x40
 8001c82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	637b      	str	r3, [r7, #52]	; 0x34
 8001c88:	2300      	movs	r3, #0
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c94:	4b59      	ldr	r3, [pc, #356]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d00d      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x40>
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	f200 80a1 	bhi.w	8001de8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d002      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d003      	beq.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cae:	e09b      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cb0:	4b53      	ldr	r3, [pc, #332]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cb2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001cb4:	e09b      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cb6:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cba:	e098      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cbc:	4b4f      	ldr	r3, [pc, #316]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cc4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cc6:	4b4d      	ldr	r3, [pc, #308]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d028      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd2:	4b4a      	ldr	r3, [pc, #296]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	099b      	lsrs	r3, r3, #6
 8001cd8:	2200      	movs	r2, #0
 8001cda:	623b      	str	r3, [r7, #32]
 8001cdc:	627a      	str	r2, [r7, #36]	; 0x24
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ce8:	fb03 f201 	mul.w	r2, r3, r1
 8001cec:	2300      	movs	r3, #0
 8001cee:	fb00 f303 	mul.w	r3, r0, r3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	4a43      	ldr	r2, [pc, #268]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cf6:	fba0 1202 	umull	r1, r2, r0, r2
 8001cfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cfc:	460a      	mov	r2, r1
 8001cfe:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d02:	4413      	add	r3, r2
 8001d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d08:	2200      	movs	r2, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	61fa      	str	r2, [r7, #28]
 8001d0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d16:	f7fe fa57 	bl	80001c8 <__aeabi_uldivmod>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4613      	mov	r3, r2
 8001d20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d22:	e053      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d24:	4b35      	ldr	r3, [pc, #212]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	099b      	lsrs	r3, r3, #6
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	617a      	str	r2, [r7, #20]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d36:	f04f 0b00 	mov.w	fp, #0
 8001d3a:	4652      	mov	r2, sl
 8001d3c:	465b      	mov	r3, fp
 8001d3e:	f04f 0000 	mov.w	r0, #0
 8001d42:	f04f 0100 	mov.w	r1, #0
 8001d46:	0159      	lsls	r1, r3, #5
 8001d48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d4c:	0150      	lsls	r0, r2, #5
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	ebb2 080a 	subs.w	r8, r2, sl
 8001d56:	eb63 090b 	sbc.w	r9, r3, fp
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d6e:	ebb2 0408 	subs.w	r4, r2, r8
 8001d72:	eb63 0509 	sbc.w	r5, r3, r9
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	00eb      	lsls	r3, r5, #3
 8001d80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d84:	00e2      	lsls	r2, r4, #3
 8001d86:	4614      	mov	r4, r2
 8001d88:	461d      	mov	r5, r3
 8001d8a:	eb14 030a 	adds.w	r3, r4, sl
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	eb45 030b 	adc.w	r3, r5, fp
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001da2:	4629      	mov	r1, r5
 8001da4:	028b      	lsls	r3, r1, #10
 8001da6:	4621      	mov	r1, r4
 8001da8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dac:	4621      	mov	r1, r4
 8001dae:	028a      	lsls	r2, r1, #10
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db6:	2200      	movs	r2, #0
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	60fa      	str	r2, [r7, #12]
 8001dbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001dc0:	f7fe fa02 	bl	80001c8 <__aeabi_uldivmod>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4613      	mov	r3, r2
 8001dca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	0c1b      	lsrs	r3, r3, #16
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001ddc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001de6:	e002      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x184>)
 8001dea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3740      	adds	r7, #64	; 0x40
 8001df4:	46bd      	mov	sp, r7
 8001df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	00f42400 	.word	0x00f42400
 8001e04:	017d7840 	.word	0x017d7840

08001e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e041      	b.n	8001e9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d106      	bne.n	8001e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7fe ff12 	bl	8000c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3304      	adds	r3, #4
 8001e44:	4619      	mov	r1, r3
 8001e46:	4610      	mov	r0, r2
 8001e48:	f000 fbb2 	bl	80025b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d001      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e04e      	b.n	8001f5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a23      	ldr	r2, [pc, #140]	; (8001f6c <HAL_TIM_Base_Start_IT+0xc4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d022      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x80>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eea:	d01d      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x80>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a1f      	ldr	r2, [pc, #124]	; (8001f70 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d018      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x80>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a1e      	ldr	r2, [pc, #120]	; (8001f74 <HAL_TIM_Base_Start_IT+0xcc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d013      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x80>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00e      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x80>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a1b      	ldr	r2, [pc, #108]	; (8001f7c <HAL_TIM_Base_Start_IT+0xd4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d009      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x80>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a19      	ldr	r2, [pc, #100]	; (8001f80 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d004      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x80>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a18      	ldr	r2, [pc, #96]	; (8001f84 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d111      	bne.n	8001f4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d010      	beq.n	8001f5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f4a:	e007      	b.n	8001f5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40010000 	.word	0x40010000
 8001f70:	40000400 	.word	0x40000400
 8001f74:	40000800 	.word	0x40000800
 8001f78:	40000c00 	.word	0x40000c00
 8001f7c:	40010400 	.word	0x40010400
 8001f80:	40014000 	.word	0x40014000
 8001f84:	40001800 	.word	0x40001800

08001f88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e041      	b.n	800201e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d106      	bne.n	8001fb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f839 	bl	8002026 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	f000 faf2 	bl	80025b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d109      	bne.n	8002060 <HAL_TIM_PWM_Start+0x24>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b01      	cmp	r3, #1
 8002056:	bf14      	ite	ne
 8002058:	2301      	movne	r3, #1
 800205a:	2300      	moveq	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	e022      	b.n	80020a6 <HAL_TIM_PWM_Start+0x6a>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2b04      	cmp	r3, #4
 8002064:	d109      	bne.n	800207a <HAL_TIM_PWM_Start+0x3e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b01      	cmp	r3, #1
 8002070:	bf14      	ite	ne
 8002072:	2301      	movne	r3, #1
 8002074:	2300      	moveq	r3, #0
 8002076:	b2db      	uxtb	r3, r3
 8002078:	e015      	b.n	80020a6 <HAL_TIM_PWM_Start+0x6a>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	2b08      	cmp	r3, #8
 800207e:	d109      	bne.n	8002094 <HAL_TIM_PWM_Start+0x58>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b01      	cmp	r3, #1
 800208a:	bf14      	ite	ne
 800208c:	2301      	movne	r3, #1
 800208e:	2300      	moveq	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	e008      	b.n	80020a6 <HAL_TIM_PWM_Start+0x6a>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b01      	cmp	r3, #1
 800209e:	bf14      	ite	ne
 80020a0:	2301      	movne	r3, #1
 80020a2:	2300      	moveq	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e07c      	b.n	80021a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d104      	bne.n	80020be <HAL_TIM_PWM_Start+0x82>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020bc:	e013      	b.n	80020e6 <HAL_TIM_PWM_Start+0xaa>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d104      	bne.n	80020ce <HAL_TIM_PWM_Start+0x92>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020cc:	e00b      	b.n	80020e6 <HAL_TIM_PWM_Start+0xaa>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d104      	bne.n	80020de <HAL_TIM_PWM_Start+0xa2>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020dc:	e003      	b.n	80020e6 <HAL_TIM_PWM_Start+0xaa>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2202      	movs	r2, #2
 80020e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2201      	movs	r2, #1
 80020ec:	6839      	ldr	r1, [r7, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fcae 	bl	8002a50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a2d      	ldr	r2, [pc, #180]	; (80021b0 <HAL_TIM_PWM_Start+0x174>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d004      	beq.n	8002108 <HAL_TIM_PWM_Start+0xcc>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a2c      	ldr	r2, [pc, #176]	; (80021b4 <HAL_TIM_PWM_Start+0x178>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d101      	bne.n	800210c <HAL_TIM_PWM_Start+0xd0>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <HAL_TIM_PWM_Start+0xd2>
 800210c:	2300      	movs	r3, #0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d007      	beq.n	8002122 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002120:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a22      	ldr	r2, [pc, #136]	; (80021b0 <HAL_TIM_PWM_Start+0x174>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d022      	beq.n	8002172 <HAL_TIM_PWM_Start+0x136>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002134:	d01d      	beq.n	8002172 <HAL_TIM_PWM_Start+0x136>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a1f      	ldr	r2, [pc, #124]	; (80021b8 <HAL_TIM_PWM_Start+0x17c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d018      	beq.n	8002172 <HAL_TIM_PWM_Start+0x136>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <HAL_TIM_PWM_Start+0x180>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d013      	beq.n	8002172 <HAL_TIM_PWM_Start+0x136>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <HAL_TIM_PWM_Start+0x184>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d00e      	beq.n	8002172 <HAL_TIM_PWM_Start+0x136>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a16      	ldr	r2, [pc, #88]	; (80021b4 <HAL_TIM_PWM_Start+0x178>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d009      	beq.n	8002172 <HAL_TIM_PWM_Start+0x136>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a18      	ldr	r2, [pc, #96]	; (80021c4 <HAL_TIM_PWM_Start+0x188>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d004      	beq.n	8002172 <HAL_TIM_PWM_Start+0x136>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a16      	ldr	r2, [pc, #88]	; (80021c8 <HAL_TIM_PWM_Start+0x18c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d111      	bne.n	8002196 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b06      	cmp	r3, #6
 8002182:	d010      	beq.n	80021a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002194:	e007      	b.n	80021a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0201 	orr.w	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40010000 	.word	0x40010000
 80021b4:	40010400 	.word	0x40010400
 80021b8:	40000400 	.word	0x40000400
 80021bc:	40000800 	.word	0x40000800
 80021c0:	40000c00 	.word	0x40000c00
 80021c4:	40014000 	.word	0x40014000
 80021c8:	40001800 	.word	0x40001800

080021cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d122      	bne.n	8002228 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d11b      	bne.n	8002228 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0202 	mvn.w	r2, #2
 80021f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f9b0 	bl	8002574 <HAL_TIM_IC_CaptureCallback>
 8002214:	e005      	b.n	8002222 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f9a2 	bl	8002560 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f9b3 	bl	8002588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b04      	cmp	r3, #4
 8002234:	d122      	bne.n	800227c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b04      	cmp	r3, #4
 8002242:	d11b      	bne.n	800227c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0204 	mvn.w	r2, #4
 800224c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2202      	movs	r2, #2
 8002252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f986 	bl	8002574 <HAL_TIM_IC_CaptureCallback>
 8002268:	e005      	b.n	8002276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f978 	bl	8002560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f989 	bl	8002588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b08      	cmp	r3, #8
 8002288:	d122      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b08      	cmp	r3, #8
 8002296:	d11b      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0208 	mvn.w	r2, #8
 80022a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2204      	movs	r2, #4
 80022a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f95c 	bl	8002574 <HAL_TIM_IC_CaptureCallback>
 80022bc:	e005      	b.n	80022ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f94e 	bl	8002560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f95f 	bl	8002588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	2b10      	cmp	r3, #16
 80022dc:	d122      	bne.n	8002324 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b10      	cmp	r3, #16
 80022ea:	d11b      	bne.n	8002324 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0210 	mvn.w	r2, #16
 80022f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2208      	movs	r2, #8
 80022fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f932 	bl	8002574 <HAL_TIM_IC_CaptureCallback>
 8002310:	e005      	b.n	800231e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f924 	bl	8002560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f935 	bl	8002588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b01      	cmp	r3, #1
 8002330:	d10e      	bne.n	8002350 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b01      	cmp	r3, #1
 800233e:	d107      	bne.n	8002350 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0201 	mvn.w	r2, #1
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7fe fb2e 	bl	80009ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235a:	2b80      	cmp	r3, #128	; 0x80
 800235c:	d10e      	bne.n	800237c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002368:	2b80      	cmp	r3, #128	; 0x80
 800236a:	d107      	bne.n	800237c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fc16 	bl	8002ba8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002386:	2b40      	cmp	r3, #64	; 0x40
 8002388:	d10e      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002394:	2b40      	cmp	r3, #64	; 0x40
 8002396:	d107      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f8fa 	bl	800259c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	d10e      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0320 	and.w	r3, r3, #32
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d107      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0220 	mvn.w	r2, #32
 80023cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fbe0 	bl	8002b94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e0ae      	b.n	8002558 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b0c      	cmp	r3, #12
 8002406:	f200 809f 	bhi.w	8002548 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800240a:	a201      	add	r2, pc, #4	; (adr r2, 8002410 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800240c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002410:	08002445 	.word	0x08002445
 8002414:	08002549 	.word	0x08002549
 8002418:	08002549 	.word	0x08002549
 800241c:	08002549 	.word	0x08002549
 8002420:	08002485 	.word	0x08002485
 8002424:	08002549 	.word	0x08002549
 8002428:	08002549 	.word	0x08002549
 800242c:	08002549 	.word	0x08002549
 8002430:	080024c7 	.word	0x080024c7
 8002434:	08002549 	.word	0x08002549
 8002438:	08002549 	.word	0x08002549
 800243c:	08002549 	.word	0x08002549
 8002440:	08002507 	.word	0x08002507
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f950 	bl	80026f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699a      	ldr	r2, [r3, #24]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0208 	orr.w	r2, r2, #8
 800245e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699a      	ldr	r2, [r3, #24]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0204 	bic.w	r2, r2, #4
 800246e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6999      	ldr	r1, [r3, #24]
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	619a      	str	r2, [r3, #24]
      break;
 8002482:	e064      	b.n	800254e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f9a0 	bl	80027d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800249e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6999      	ldr	r1, [r3, #24]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	021a      	lsls	r2, r3, #8
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	619a      	str	r2, [r3, #24]
      break;
 80024c4:	e043      	b.n	800254e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68b9      	ldr	r1, [r7, #8]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 f9f5 	bl	80028bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	69da      	ldr	r2, [r3, #28]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0208 	orr.w	r2, r2, #8
 80024e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	69da      	ldr	r2, [r3, #28]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0204 	bic.w	r2, r2, #4
 80024f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	69d9      	ldr	r1, [r3, #28]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	61da      	str	r2, [r3, #28]
      break;
 8002504:	e023      	b.n	800254e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68b9      	ldr	r1, [r7, #8]
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fa49 	bl	80029a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	69da      	ldr	r2, [r3, #28]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	69da      	ldr	r2, [r3, #28]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69d9      	ldr	r1, [r3, #28]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	021a      	lsls	r2, r3, #8
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	61da      	str	r2, [r3, #28]
      break;
 8002546:	e002      	b.n	800254e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	75fb      	strb	r3, [r7, #23]
      break;
 800254c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002556:	7dfb      	ldrb	r3, [r7, #23]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a40      	ldr	r2, [pc, #256]	; (80026c4 <TIM_Base_SetConfig+0x114>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d013      	beq.n	80025f0 <TIM_Base_SetConfig+0x40>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ce:	d00f      	beq.n	80025f0 <TIM_Base_SetConfig+0x40>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a3d      	ldr	r2, [pc, #244]	; (80026c8 <TIM_Base_SetConfig+0x118>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d00b      	beq.n	80025f0 <TIM_Base_SetConfig+0x40>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a3c      	ldr	r2, [pc, #240]	; (80026cc <TIM_Base_SetConfig+0x11c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d007      	beq.n	80025f0 <TIM_Base_SetConfig+0x40>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a3b      	ldr	r2, [pc, #236]	; (80026d0 <TIM_Base_SetConfig+0x120>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d003      	beq.n	80025f0 <TIM_Base_SetConfig+0x40>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a3a      	ldr	r2, [pc, #232]	; (80026d4 <TIM_Base_SetConfig+0x124>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d108      	bne.n	8002602 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a2f      	ldr	r2, [pc, #188]	; (80026c4 <TIM_Base_SetConfig+0x114>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d02b      	beq.n	8002662 <TIM_Base_SetConfig+0xb2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002610:	d027      	beq.n	8002662 <TIM_Base_SetConfig+0xb2>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a2c      	ldr	r2, [pc, #176]	; (80026c8 <TIM_Base_SetConfig+0x118>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d023      	beq.n	8002662 <TIM_Base_SetConfig+0xb2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a2b      	ldr	r2, [pc, #172]	; (80026cc <TIM_Base_SetConfig+0x11c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d01f      	beq.n	8002662 <TIM_Base_SetConfig+0xb2>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a2a      	ldr	r2, [pc, #168]	; (80026d0 <TIM_Base_SetConfig+0x120>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d01b      	beq.n	8002662 <TIM_Base_SetConfig+0xb2>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a29      	ldr	r2, [pc, #164]	; (80026d4 <TIM_Base_SetConfig+0x124>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d017      	beq.n	8002662 <TIM_Base_SetConfig+0xb2>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a28      	ldr	r2, [pc, #160]	; (80026d8 <TIM_Base_SetConfig+0x128>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d013      	beq.n	8002662 <TIM_Base_SetConfig+0xb2>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a27      	ldr	r2, [pc, #156]	; (80026dc <TIM_Base_SetConfig+0x12c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00f      	beq.n	8002662 <TIM_Base_SetConfig+0xb2>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a26      	ldr	r2, [pc, #152]	; (80026e0 <TIM_Base_SetConfig+0x130>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00b      	beq.n	8002662 <TIM_Base_SetConfig+0xb2>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a25      	ldr	r2, [pc, #148]	; (80026e4 <TIM_Base_SetConfig+0x134>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d007      	beq.n	8002662 <TIM_Base_SetConfig+0xb2>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a24      	ldr	r2, [pc, #144]	; (80026e8 <TIM_Base_SetConfig+0x138>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d003      	beq.n	8002662 <TIM_Base_SetConfig+0xb2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a23      	ldr	r2, [pc, #140]	; (80026ec <TIM_Base_SetConfig+0x13c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d108      	bne.n	8002674 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4313      	orrs	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <TIM_Base_SetConfig+0x114>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d003      	beq.n	80026a8 <TIM_Base_SetConfig+0xf8>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a0c      	ldr	r2, [pc, #48]	; (80026d4 <TIM_Base_SetConfig+0x124>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d103      	bne.n	80026b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	615a      	str	r2, [r3, #20]
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40010000 	.word	0x40010000
 80026c8:	40000400 	.word	0x40000400
 80026cc:	40000800 	.word	0x40000800
 80026d0:	40000c00 	.word	0x40000c00
 80026d4:	40010400 	.word	0x40010400
 80026d8:	40014000 	.word	0x40014000
 80026dc:	40014400 	.word	0x40014400
 80026e0:	40014800 	.word	0x40014800
 80026e4:	40001800 	.word	0x40001800
 80026e8:	40001c00 	.word	0x40001c00
 80026ec:	40002000 	.word	0x40002000

080026f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	f023 0201 	bic.w	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f023 0303 	bic.w	r3, r3, #3
 8002726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f023 0302 	bic.w	r3, r3, #2
 8002738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4313      	orrs	r3, r2
 8002742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a20      	ldr	r2, [pc, #128]	; (80027c8 <TIM_OC1_SetConfig+0xd8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d003      	beq.n	8002754 <TIM_OC1_SetConfig+0x64>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a1f      	ldr	r2, [pc, #124]	; (80027cc <TIM_OC1_SetConfig+0xdc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d10c      	bne.n	800276e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f023 0308 	bic.w	r3, r3, #8
 800275a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4313      	orrs	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f023 0304 	bic.w	r3, r3, #4
 800276c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a15      	ldr	r2, [pc, #84]	; (80027c8 <TIM_OC1_SetConfig+0xd8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d003      	beq.n	800277e <TIM_OC1_SetConfig+0x8e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a14      	ldr	r2, [pc, #80]	; (80027cc <TIM_OC1_SetConfig+0xdc>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d111      	bne.n	80027a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800278c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	621a      	str	r2, [r3, #32]
}
 80027bc:	bf00      	nop
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	40010000 	.word	0x40010000
 80027cc:	40010400 	.word	0x40010400

080027d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	f023 0210 	bic.w	r2, r3, #16
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f023 0320 	bic.w	r3, r3, #32
 800281a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4313      	orrs	r3, r2
 8002826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a22      	ldr	r2, [pc, #136]	; (80028b4 <TIM_OC2_SetConfig+0xe4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d003      	beq.n	8002838 <TIM_OC2_SetConfig+0x68>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a21      	ldr	r2, [pc, #132]	; (80028b8 <TIM_OC2_SetConfig+0xe8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d10d      	bne.n	8002854 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800283e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002852:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a17      	ldr	r2, [pc, #92]	; (80028b4 <TIM_OC2_SetConfig+0xe4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d003      	beq.n	8002864 <TIM_OC2_SetConfig+0x94>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a16      	ldr	r2, [pc, #88]	; (80028b8 <TIM_OC2_SetConfig+0xe8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d113      	bne.n	800288c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800286a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002872:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	621a      	str	r2, [r3, #32]
}
 80028a6:	bf00      	nop
 80028a8:	371c      	adds	r7, #28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40010000 	.word	0x40010000
 80028b8:	40010400 	.word	0x40010400

080028bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0303 	bic.w	r3, r3, #3
 80028f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	021b      	lsls	r3, r3, #8
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a21      	ldr	r2, [pc, #132]	; (800299c <TIM_OC3_SetConfig+0xe0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d003      	beq.n	8002922 <TIM_OC3_SetConfig+0x66>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a20      	ldr	r2, [pc, #128]	; (80029a0 <TIM_OC3_SetConfig+0xe4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10d      	bne.n	800293e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800293c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a16      	ldr	r2, [pc, #88]	; (800299c <TIM_OC3_SetConfig+0xe0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d003      	beq.n	800294e <TIM_OC3_SetConfig+0x92>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a15      	ldr	r2, [pc, #84]	; (80029a0 <TIM_OC3_SetConfig+0xe4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d113      	bne.n	8002976 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800295c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	621a      	str	r2, [r3, #32]
}
 8002990:	bf00      	nop
 8002992:	371c      	adds	r7, #28
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	40010000 	.word	0x40010000
 80029a0:	40010400 	.word	0x40010400

080029a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	031b      	lsls	r3, r3, #12
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a12      	ldr	r2, [pc, #72]	; (8002a48 <TIM_OC4_SetConfig+0xa4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d003      	beq.n	8002a0c <TIM_OC4_SetConfig+0x68>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a11      	ldr	r2, [pc, #68]	; (8002a4c <TIM_OC4_SetConfig+0xa8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d109      	bne.n	8002a20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	019b      	lsls	r3, r3, #6
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	621a      	str	r2, [r3, #32]
}
 8002a3a:	bf00      	nop
 8002a3c:	371c      	adds	r7, #28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40010000 	.word	0x40010000
 8002a4c:	40010400 	.word	0x40010400

08002a50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f003 031f 	and.w	r3, r3, #31
 8002a62:	2201      	movs	r2, #1
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a1a      	ldr	r2, [r3, #32]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	401a      	ands	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a1a      	ldr	r2, [r3, #32]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	fa01 f303 	lsl.w	r3, r1, r3
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	621a      	str	r2, [r3, #32]
}
 8002a8e:	bf00      	nop
 8002a90:	371c      	adds	r7, #28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e05a      	b.n	8002b6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a21      	ldr	r2, [pc, #132]	; (8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d022      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b00:	d01d      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1d      	ldr	r2, [pc, #116]	; (8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d018      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1b      	ldr	r2, [pc, #108]	; (8002b80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1a      	ldr	r2, [pc, #104]	; (8002b84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d00e      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a18      	ldr	r2, [pc, #96]	; (8002b88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d009      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a17      	ldr	r2, [pc, #92]	; (8002b8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d004      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a15      	ldr	r2, [pc, #84]	; (8002b90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d10c      	bne.n	8002b58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40010000 	.word	0x40010000
 8002b7c:	40000400 	.word	0x40000400
 8002b80:	40000800 	.word	0x40000800
 8002b84:	40000c00 	.word	0x40000c00
 8002b88:	40010400 	.word	0x40010400
 8002b8c:	40014000 	.word	0x40014000
 8002b90:	40001800 	.word	0x40001800

08002b94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <__libc_init_array>:
 8002bbc:	b570      	push	{r4, r5, r6, lr}
 8002bbe:	4d0d      	ldr	r5, [pc, #52]	; (8002bf4 <__libc_init_array+0x38>)
 8002bc0:	4c0d      	ldr	r4, [pc, #52]	; (8002bf8 <__libc_init_array+0x3c>)
 8002bc2:	1b64      	subs	r4, r4, r5
 8002bc4:	10a4      	asrs	r4, r4, #2
 8002bc6:	2600      	movs	r6, #0
 8002bc8:	42a6      	cmp	r6, r4
 8002bca:	d109      	bne.n	8002be0 <__libc_init_array+0x24>
 8002bcc:	4d0b      	ldr	r5, [pc, #44]	; (8002bfc <__libc_init_array+0x40>)
 8002bce:	4c0c      	ldr	r4, [pc, #48]	; (8002c00 <__libc_init_array+0x44>)
 8002bd0:	f000 f820 	bl	8002c14 <_init>
 8002bd4:	1b64      	subs	r4, r4, r5
 8002bd6:	10a4      	asrs	r4, r4, #2
 8002bd8:	2600      	movs	r6, #0
 8002bda:	42a6      	cmp	r6, r4
 8002bdc:	d105      	bne.n	8002bea <__libc_init_array+0x2e>
 8002bde:	bd70      	pop	{r4, r5, r6, pc}
 8002be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be4:	4798      	blx	r3
 8002be6:	3601      	adds	r6, #1
 8002be8:	e7ee      	b.n	8002bc8 <__libc_init_array+0xc>
 8002bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bee:	4798      	blx	r3
 8002bf0:	3601      	adds	r6, #1
 8002bf2:	e7f2      	b.n	8002bda <__libc_init_array+0x1e>
 8002bf4:	08002c44 	.word	0x08002c44
 8002bf8:	08002c44 	.word	0x08002c44
 8002bfc:	08002c44 	.word	0x08002c44
 8002c00:	08002c48 	.word	0x08002c48

08002c04 <memset>:
 8002c04:	4402      	add	r2, r0
 8002c06:	4603      	mov	r3, r0
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d100      	bne.n	8002c0e <memset+0xa>
 8002c0c:	4770      	bx	lr
 8002c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c12:	e7f9      	b.n	8002c08 <memset+0x4>

08002c14 <_init>:
 8002c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c16:	bf00      	nop
 8002c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1a:	bc08      	pop	{r3}
 8002c1c:	469e      	mov	lr, r3
 8002c1e:	4770      	bx	lr

08002c20 <_fini>:
 8002c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c22:	bf00      	nop
 8002c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c26:	bc08      	pop	{r3}
 8002c28:	469e      	mov	lr, r3
 8002c2a:	4770      	bx	lr
